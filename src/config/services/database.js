import { db } from '../firebase.js';
import admin from '../firebase.js';

export class Database {
    constructor() {
        this.usersCollection = db.collection('users');
        this.settingsCollection = db.collection('settings');
        this.broadcastsCollection = db.collection('broadcasts');
        this.notificationsCollection = db.collection('notifications');
        this.statsCollection = db.collection('statistics');
    }

    // ========== USERS ==========

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUser(userId) {
        try {
            const userDoc = await this.usersCollection.doc(userId.toString()).get();
            if (userDoc.exists) {
                console.log(`‚úÖ User ${userId} found`);
                return userDoc.data();
            }
            console.log(`‚ÑπÔ∏è User ${userId} not found`);
            return null;
        } catch (error) {
            console.error('‚ùå Error getting user:', error);
            return null;
        }
    }

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async createUser(userId, userData) {
        try {
            await this.usersCollection.doc(userId.toString()).set({
                user_id: userId,
                username: userData.username || '',
                first_name: userData.first_name || '',
                language: null, // –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ null, –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ /start
                phone_number: null,
                is_subscribed: false,
                channel_subscription_verified: false,
                notifications_enabled: true,
                notifications_count: 0,
                last_notification_time: null,
                registration_date: admin.firestore.FieldValue.serverTimestamp(),
                last_activity: admin.firestore.FieldValue.serverTimestamp(),
                onboarding_completed: false,
                onboarding_step: 'language_selection',
            });
            console.log(`‚úÖ User ${userId} created successfully`);
            return true;
        } catch (error) {
            console.error('‚ùå Error creating user:', error);
            return false;
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUser(userId, updates) {
        try {
            await this.usersCollection.doc(userId.toString()).update({
                ...updates,
                last_activity: admin.firestore.FieldValue.serverTimestamp(),
            });
            console.log(`‚úÖ User ${userId} updated`);
            return true;
        } catch (error) {
            console.error('‚ùå Error updating user:', error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async getAllUsers() {
        try {
            const snapshot = await this.usersCollection.get();
            const users = [];
            snapshot.forEach(doc => {
                users.push(doc.data());
            });
            console.log(`‚úÖ Retrieved ${users.length} users`);
            return users;
        } catch (error) {
            console.error('‚ùå Error getting all users:', error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —è–∑—ã–∫—É
    async getUsersByLanguage(language) {
        try {
            const snapshot = await this.usersCollection.where('language', '==', language).get();
            const users = [];
            snapshot.forEach(doc => {
                users.push(doc.data());
            });
            console.log(`‚úÖ Retrieved ${users.length} users with language: ${language}`);
            return users;
        } catch (error) {
            console.error('‚ùå Error getting users by language:', error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    async getUsersWithNotifications(language = null) {
        try {
            let query = this.usersCollection.where('notifications_enabled', '==', true);

            if (language) {
                query = query.where('language', '==', language);
            }

            const snapshot = await query.get();
            const users = [];
            snapshot.forEach(doc => {
                users.push(doc.data());
            });
            console.log(`‚úÖ Retrieved ${users.length} users with notifications enabled`);
            return users;
        } catch (error) {
            console.error('‚ùå Error getting users with notifications:', error);
            return [];
        }
    }

    // ========== SETTINGS ==========

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    async getBotSettings() {
        try {
            const settingsDoc = await this.settingsCollection.doc('bot_config').get();

            if (settingsDoc.exists) {
                return settingsDoc.data();
            }

            console.log('‚ö†Ô∏è Settings not found, creating default...');
            await this.createDefaultSettings();
            return await this.getBotSettings();
        } catch (error) {
            console.error('‚ùå Error getting settings:', error);
            return null;
        }
    }

    // –°–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    async createDefaultSettings() {
        try {
            const defaultSettings = {
                phone_number_required: false,
                notification_interval_hours: 2,
                notification_schedule: {
                    enabled: true,
                    quiet_hours_start: 23,
                    quiet_hours_end: 8,
                    max_per_day: 12
                },
                channel_id: '@hertzbet_channel',
                channel_username: 'hertzbet_channel',
                welcome_image_url: 'https://example.com/welcome.jpg',
                welcome_text: {
                    de: 'üé∞ Willkommen bei Hertzbet!\n\n‚ú® Tausende von Spielen\nüí∞ Willkommensbonus\nüéÅ Cashback & Free Spins\n‚ö°Ô∏è Schnelle Auszahlungen\nüèÜ VIP-Programm\nüí¨ 24/7 Support',
                    en: 'üé∞ Welcome to Hertzbet!\n\n‚ú® Thousands of games\nüí∞ Welcome bonus\nüéÅ Cashback & Free Spins\n‚ö°Ô∏è Fast withdrawals\nüèÜ VIP Program\nüí¨ 24/7 Support'
                },
                admin_ids: [5230934145],
                created_at: admin.firestore.FieldValue.serverTimestamp(),
                updated_at: admin.firestore.FieldValue.serverTimestamp()
            };

            await this.settingsCollection.doc('bot_config').set(defaultSettings);
            console.log('‚úÖ Default settings created');
            return true;
        } catch (error) {
            console.error('‚ùå Error creating default settings:', error);
            return false;
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    async updateSettings(updates) {
        try {
            await this.settingsCollection.doc('bot_config').update({
                ...updates,
                updated_at: admin.firestore.FieldValue.serverTimestamp()
            });
            console.log('‚úÖ Settings updated');
            return true;
        } catch (error) {
            console.error('‚ùå Error updating settings:', error);
            return false;
        }
    }



    // –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
    async addAdmin(userId) {
        try {
            const settings = await this.getBotSettings();
            if (!settings.admin_ids.includes(userId)) {
                settings.admin_ids.push(userId);
                await this.updateSettings({ admin_ids: settings.admin_ids });
                console.log(`‚úÖ Admin ${userId} added`);
                return true;
            }
            return false;
        } catch (error) {
            console.error('‚ùå Error adding admin:', error);
            return false;
        }
    }

    // –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
    async removeAdmin(userId) {
        try {
            const settings = await this.getBotSettings();
            const newAdmins = settings.admin_ids.filter(id => id !== userId);
            await this.updateSettings({ admin_ids: newAdmins });
            console.log(`‚úÖ Admin ${userId} removed`);
            return true;
        } catch (error) {
            console.error('‚ùå Error removing admin:', error);
            return false;
        }
    }

    // ========== STATISTICS ==========

    // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async getTotalUsers() {
        try {
            const snapshot = await this.usersCollection.count().get();
            return snapshot.data().count;
        } catch (error) {
            console.error('‚ùå Error getting total users:', error);
            return 0;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
    async getNewUsersInPeriod(startDate, endDate) {
        try {
            const snapshot = await this.usersCollection
                .where('registration_date', '>=', startDate)
                .where('registration_date', '<=', endDate)
                .get();

            return snapshot.size;
        } catch (error) {
            console.error('‚ùå Error getting new users in period:', error);
            return 0;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —è–∑—ã–∫–∞–º
    async getLanguageStats() {
        try {
            const allUsers = await this.getAllUsers();
            const stats = {
                de: 0,
                en: 0,
                null: 0
            };

            allUsers.forEach(user => {
                const lang = user.language || 'null';
                stats[lang] = (stats[lang] || 0) + 1;
            });

            return stats;
        } catch (error) {
            console.error('‚ùå Error getting language stats:', error);
            return { de: 0, en: 0, null: 0 };
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    async getWeeklyStats() {
        try {
            const now = new Date();
            const dayOfWeek = now.getDay();
            const diff = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0

            const monday = new Date(now);
            monday.setDate(now.getDate() - diff);
            monday.setHours(0, 0, 0, 0);

            const sunday = new Date(monday);
            sunday.setDate(monday.getDate() + 6);
            sunday.setHours(23, 59, 59, 999);

            return await this.getNewUsersInPeriod(monday, sunday);
        } catch (error) {
            console.error('‚ùå Error getting weekly stats:', error);
            return 0;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    async getCurrentMonthStats() {
        try {
            const now = new Date();
            const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
            const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);

            return await this.getNewUsersInPeriod(firstDay, lastDay);
        } catch (error) {
            console.error('‚ùå Error getting current month stats:', error);
            return 0;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
    async getLastMonthStats() {
        try {
            const now = new Date();
            const firstDay = new Date(now.getFullYear(), now.getMonth() - 1, 1);
            const lastDay = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59, 999);

            return await this.getNewUsersInPeriod(firstDay, lastDay);
        } catch (error) {
            console.error('‚ùå Error getting last month stats:', error);
            return 0;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    async getFullStats() {
        try {
            const [total, weekly, monthly, lastMonth, langStats] = await Promise.all([
                this.getTotalUsers(),
                this.getWeeklyStats(),
                this.getCurrentMonthStats(),
                this.getLastMonthStats(),
                this.getLanguageStats()
            ]);

            return {
                total_users: total,
                new_this_week: weekly,
                new_this_month: monthly,
                new_last_month: lastMonth,
                by_language: langStats
            };
        } catch (error) {
            console.error('‚ùå Error getting full stats:', error);
            return null;
        }
    }

    // ========== BROADCASTS ==========

    // –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
    async createBroadcast(broadcastData) {
        try {
            const broadcastRef = await this.broadcastsCollection.add({
                text: broadcastData.text,
                media_url: broadcastData.media_url || null,
                media_type: broadcastData.media_type || null,
                buttons: broadcastData.buttons || [],
                target_language: broadcastData.target_language || 'all', // all, de, en
                status: 'pending', // pending, in_progress, completed, failed
                sent_count: 0,
                failed_count: 0,
                total_count: 0,
                created_by: broadcastData.admin_id,
                created_at: admin.firestore.FieldValue.serverTimestamp(),
                started_at: null,
                completed_at: null
            });

            console.log(`‚úÖ Broadcast ${broadcastRef.id} created`);
            return broadcastRef.id;
        } catch (error) {
            console.error('‚ùå Error creating broadcast:', error);
            return null;
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
    async updateBroadcast(broadcastId, updates) {
        try {
            await this.broadcastsCollection.doc(broadcastId).update(updates);
            console.log(`‚úÖ Broadcast ${broadcastId} updated`);
            return true;
        } catch (error) {
            console.error('‚ùå Error updating broadcast:', error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
    async getBroadcast(broadcastId) {
        try {
            const doc = await this.broadcastsCollection.doc(broadcastId).get();
            if (doc.exists) {
                return { id: doc.id, ...doc.data() };
            }
            return null;
        } catch (error) {
            console.error('‚ùå Error getting broadcast:', error);
            return null;
        }
    }

    // ========== NOTIFICATIONS ==========

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    async logNotification(userId, notificationData) {
        try {
            await this.notificationsCollection.add({
                user_id: userId,
                text: notificationData.text,
                media_url: notificationData.media_url || null,
                sent_at: admin.firestore.FieldValue.serverTimestamp(),
                status: notificationData.status || 'sent'
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.updateUser(userId, {
                notifications_count: admin.firestore.FieldValue.increment(1),
                last_notification_time: admin.firestore.FieldValue.serverTimestamp()
            });

            return true;
        } catch (error) {
            console.error('‚ùå Error logging notification:', error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getTodayNotificationCount(userId) {
        try {
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            const snapshot = await this.notificationsCollection
                .where('user_id', '==', userId)
                .where('sent_at', '>=', today)
                .get();

            return snapshot.size;
        } catch (error) {
            console.error('‚ùå Error getting today notification count:', error);
            return 0;
        }
    }

    // ========== UTILITY ==========

    // –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    async testConnection() {
        try {
            await this.usersCollection.doc('test').set({
                test: true,
                timestamp: admin.firestore.FieldValue.serverTimestamp(),
            });
            console.log('‚úÖ Firebase connection test: SUCCESS');

            await this.usersCollection.doc('test').delete();
            return true;
        } catch (error) {
            console.error('‚ùå Firebase connection test: FAILED', error);
            return false;
        }
    }

    // –í –º–µ—Ç–æ–¥–µ isAdmin –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
    async isAdmin(userId) {
        try {
            const settings = await this.getBotSettings();
            console.log('üîç DEBUG isAdmin:');
            console.log('   Checking userId:', userId);
            console.log('   admin_ids from DB:', settings?.admin_ids);
            console.log('   Includes?', settings?.admin_ids?.includes(userId));
            return settings?.admin_ids?.includes(userId) || false;
        } catch (error) {
            console.error('‚ùå Error checking admin:', error);
            return false;
        }
    }
}

export const database = new Database();