import { Markup } from 'telegraf';
import { database } from '../config/services/database.js';
import { t } from '../locales/i18n.js';
import { sendWelcomeMessageWithImage } from '../utils/welcome.js';

/**
 * –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserLanguage(userId) {
    const user = await database.getUser(userId);
    return user?.language || 'en';
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export async function shouldRequestPhone() {
    const settings = await database.getBotSettings();
    return settings?.phone_number_required || false;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export async function requestPhoneNumber(ctx, language) {
    const userId = ctx.from.id;

    console.log(`üì± Requesting phone number from user ${userId}`);

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"
    const phoneKeyboard = Markup.keyboard([
        [Markup.button.contactRequest(t('phone.button_share', language))],
        [Markup.button.text(t('phone.button_skip', language))]
    ])
        .resize()
        .oneTime();

    await ctx.reply(
        t('phone.request_text', language),
        phoneKeyboard
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    await database.updateUser(userId, {
        onboarding_step: 'phone_request'
    });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export async function handlePhoneContact(ctx) {
    const userId = ctx.from.id;
    const phone = ctx.message.contact?.phone_number;
    const lang = await getUserLanguage(userId);

    console.log(`üì± User ${userId} shared phone: ${phone}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (ctx.message.contact.user_id !== userId) {
        await ctx.reply(
            '‚ö†Ô∏è Please share YOUR phone number, not someone else\'s.',
            Markup.removeKeyboard()
        );
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await database.updateUser(userId, {
        phone_number: phone,
        onboarding_step: 'completed',
        onboarding_completed: true
    });

    console.log(`‚úÖ Phone number saved for user ${userId}`);

    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await ctx.reply(
        t('phone.success', lang),
        Markup.removeKeyboard()
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sendWelcomeMessageWithImage(ctx, lang);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export async function handlePhoneSkip(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);
    const text = ctx.message.text;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    const skipButtonText = t('phone.button_skip', lang);

    if (text !== skipButtonText) {
        return false; // –≠—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
    }

    console.log(`‚è≠Ô∏è User ${userId} skipped phone request`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await database.updateUser(userId, {
        onboarding_step: 'completed',
        onboarding_completed: true
    });

    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply(
        t('phone.skipped', lang),
        Markup.removeKeyboard()
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sendWelcomeMessageWithImage(ctx, lang);

    return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export async function isAwaitingPhone(userId) {
    const user = await database.getUser(userId);
    return user?.onboarding_step === 'phone_request';
}