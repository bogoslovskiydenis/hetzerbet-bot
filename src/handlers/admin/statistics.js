import { database } from '../../config/services/database.js';
import { t } from '../../locales/i18n.js';
import { getBackButton } from '../../utils/keyboards.js';
import { adminMiddleware } from './index.js';

/**
 * –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserLanguage(userId) {
    const user = await database.getUser(userId);
    return user?.language || 'en';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
function formatStatisticsMessage(stats, lang) {
    return `
${t('admin.statistics.title', lang)}

${t('admin.statistics.total_users', lang, { count: stats.total_users })}
${t('admin.statistics.new_week', lang, { count: stats.new_this_week })}
${t('admin.statistics.new_month', lang, { count: stats.new_this_month })}
${t('admin.statistics.last_month', lang, { count: stats.new_last_month })}

${t('admin.statistics.by_language', lang)}
${t('admin.statistics.german', lang, { count: stats.by_language.de || 0 })}
${t('admin.statistics.english', lang, { count: stats.by_language.en || 0 })}
${t('admin.statistics.not_set', lang, { count: stats.by_language.null || 0 })}
    `.trim();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
 */
export async function handleStatistics(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await ctx.answerCbQuery('üìä Loading statistics...');

    console.log(`üìà User ${userId} requested statistics`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        const stats = await database.getFullStats();

        if (!stats) {
            await ctx.reply(t('errors.general', lang));
            return;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = formatStatisticsMessage(stats, lang);

        await ctx.editMessageText(
            message,
            getBackButton(lang)
        );

        console.log(`‚úÖ Statistics sent to ${userId}`);

    } catch (error) {
        console.error('‚ùå Error loading statistics:', error);
        await ctx.reply(t('errors.general', lang));
    }
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
export function registerStatisticsHandlers(bot) {
    bot.action('admin_stats', adminMiddleware, handleStatistics);

    console.log('‚úÖ Statistics handlers registered');
}