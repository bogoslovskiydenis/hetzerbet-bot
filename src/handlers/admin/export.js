import { database } from '../../config/services/database.js';
import { t } from '../../locales/i18n.js';
import { getExportKeyboard, getBackButton } from '../../utils/keyboards.js';
import { adminMiddleware } from './index.js';
import {
    exportToExcel,
    exportToCSV,
    exportUsernames,
    exportUserIds,
    cleanupFile,
    cleanupOldFiles
} from '../../services/export.js';

/**
 * –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserLanguage(userId) {
    const user = await database.getUser(userId);
    return user?.language || 'en';
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
 */
export async function handleExport(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();

    console.log(`üíæ User ${userId} opened export menu`);

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é
    cleanupOldFiles();

    await ctx.editMessageText(
        t('admin.export.title', lang),
        getExportKeyboard(lang)
    );
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
 */
export async function handleExportExcel(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery(t('admin.export.generating', lang));

    console.log(`üìä User ${userId} requested Excel export`);

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        const statusMessage = await ctx.reply(
            '‚è≥ Generating Excel file...\n\nPlease wait...'
        );

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª
        const result = await exportToExcel();

        if (!result.success) {
            await ctx.telegram.editMessageText(
                ctx.chat.id,
                statusMessage.message_id,
                null,
                `‚ùå ${t('admin.export.error', lang)}\n\nError: ${result.error}`
            );
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await ctx.replyWithDocument(
            { source: result.filepath, filename: result.filename },
            {
                caption: `‚úÖ ${t('admin.export.success', lang)}\n\n` +
                    `üìä Total users: ${result.count}\n` +
                    `üìÖ Generated: ${new Date().toLocaleString()}`
            }
        );

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.telegram.deleteMessage(ctx.chat.id, statusMessage.message_id);

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        setTimeout(() => {
            cleanupFile(result.filepath);
        }, 5000);

        console.log(`‚úÖ Excel file sent to ${userId}`);

    } catch (error) {
        console.error('‚ùå Error in Excel export:', error);
        await ctx.reply(t('admin.export.error', lang));
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
 */
export async function handleExportCSV(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery(t('admin.export.generating', lang));

    console.log(`üìÑ User ${userId} requested CSV export`);

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        const statusMessage = await ctx.reply(
            '‚è≥ Generating CSV file...\n\nPlease wait...'
        );

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª
        const result = await exportToCSV();

        if (!result.success) {
            await ctx.telegram.editMessageText(
                ctx.chat.id,
                statusMessage.message_id,
                null,
                `‚ùå ${t('admin.export.error', lang)}\n\nError: ${result.error}`
            );
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await ctx.replyWithDocument(
            { source: result.filepath, filename: result.filename },
            {
                caption: `‚úÖ ${t('admin.export.success', lang)}\n\n` +
                    `üìä Total users: ${result.count}\n` +
                    `üìÖ Generated: ${new Date().toLocaleString()}`
            }
        );

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.telegram.deleteMessage(ctx.chat.id, statusMessage.message_id);

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        setTimeout(() => {
            cleanupFile(result.filepath);
        }, 5000);

        console.log(`‚úÖ CSV file sent to ${userId}`);

    } catch (error) {
        console.error('‚ùå Error in CSV export:', error);
        await ctx.reply(t('admin.export.error', lang));
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç usernames
 */
export async function handleExportUsernames(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery(t('admin.export.generating', lang));

    console.log(`üë§ User ${userId} requested usernames export`);

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        const statusMessage = await ctx.reply(
            '‚è≥ Generating usernames list...\n\nPlease wait...'
        );

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª
        const result = await exportUsernames();

        if (!result.success) {
            await ctx.telegram.editMessageText(
                ctx.chat.id,
                statusMessage.message_id,
                null,
                `‚ùå ${t('admin.export.error', lang)}\n\nError: ${result.error}`
            );
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await ctx.replyWithDocument(
            { source: result.filepath, filename: result.filename },
            {
                caption: `‚úÖ ${t('admin.export.success', lang)}\n\n` +
                    `üë§ Usernames: ${result.count}\n` +
                    `üë• Total users: ${result.total}\n` +
                    `üìÖ Generated: ${new Date().toLocaleString()}`
            }
        );

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.telegram.deleteMessage(ctx.chat.id, statusMessage.message_id);

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        setTimeout(() => {
            cleanupFile(result.filepath);
        }, 5000);

        console.log(`‚úÖ Usernames file sent to ${userId}`);

    } catch (error) {
        console.error('‚ùå Error in usernames export:', error);
        await ctx.reply(t('admin.export.error', lang));
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç user IDs
 */
export async function handleExportUserIds(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery(t('admin.export.generating', lang));

    console.log(`üÜî User ${userId} requested user IDs export`);

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        const statusMessage = await ctx.reply(
            '‚è≥ Generating user IDs list...\n\nPlease wait...'
        );

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª
        const result = await exportUserIds();

        if (!result.success) {
            await ctx.telegram.editMessageText(
                ctx.chat.id,
                statusMessage.message_id,
                null,
                `‚ùå ${t('admin.export.error', lang)}\n\nError: ${result.error}`
            );
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await ctx.replyWithDocument(
            { source: result.filepath, filename: result.filename },
            {
                caption: `‚úÖ ${t('admin.export.success', lang)}\n\n` +
                    `üÜî Total IDs: ${result.count}\n` +
                    `üìÖ Generated: ${new Date().toLocaleString()}`
            }
        );

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.telegram.deleteMessage(ctx.chat.id, statusMessage.message_id);

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        setTimeout(() => {
            cleanupFile(result.filepath);
        }, 5000);

        console.log(`‚úÖ User IDs file sent to ${userId}`);

    } catch (error) {
        console.error('‚ùå Error in user IDs export:', error);
        await ctx.reply(t('admin.export.error', lang));
    }
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
 */
export function registerExportHandlers(bot) {
    bot.action('admin_export', adminMiddleware, handleExport);
    bot.action('export_excel', adminMiddleware, handleExportExcel);
    bot.action('export_csv', adminMiddleware, handleExportCSV);
    bot.action('export_usernames', adminMiddleware, handleExportUsernames);
    bot.action('export_ids', adminMiddleware, handleExportUserIds);

    console.log('‚úÖ Export handlers registered');
}