import { database } from '../../config/services/database.js';
import { t } from '../../locales/i18n.js';
import { getAdminKeyboard } from '../../utils/keyboards.js';

/**
 * –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserLanguage(userId) {
    const user = await database.getUser(userId);
    return user?.language || 'en';
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
async function checkAdminAccess(ctx) {
    const userId = ctx.from.id;
    const isAdmin = await database.isAdmin(userId);

    if (!isAdmin) {
        const lang = await getUserLanguage(userId);
        await ctx.reply(t('admin.access_denied', lang));

        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –¥–æ—Å—Ç—É–ø–∞
        console.log(`‚ö†Ô∏è Unauthorized admin access attempt:`);
        console.log(`   User ID: ${userId}`);
        console.log(`   Username: @${ctx.from.username || 'unknown'}`);
        console.log(`   Name: ${ctx.from.first_name} ${ctx.from.last_name || ''}`);

        return false;
    }

    return true;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
 */
export async function handleAdminCommand(ctx) {
    const userId = ctx.from.id;
    const username = ctx.from.username;

    console.log(`\nüîê Admin access attempt:`);
    console.log(`   User ID: ${userId}`);
    console.log(`   Username: @${username || 'unknown'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const hasAccess = await checkAdminAccess(ctx);
    if (!hasAccess) {
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lang = await getUserLanguage(userId);

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
    console.log(`‚úÖ Admin panel accessed by ${userId} (@${username})`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    await ctx.reply(
        t('admin.panel_title', lang),
        getAdminKeyboard(lang)
    );
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω–∫–µ
 */
export async function handleAdminBack(ctx) {
    const userId = ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const hasAccess = await checkAdminAccess(ctx);
    if (!hasAccess) {
        await ctx.answerCbQuery(t('admin.access_denied', 'en'));
        return;
    }

    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    await ctx.editMessageText(
        t('admin.panel_title', lang),
        getAdminKeyboard(lang)
    );
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
export async function adminMiddleware(ctx, next) {
    const userId = ctx.from.id;
    const isAdmin = await database.isAdmin(userId);

    if (!isAdmin) {
        const lang = await getUserLanguage(userId);
        await ctx.answerCbQuery(t('admin.access_denied', lang));

        console.log(`‚ö†Ô∏è Unauthorized action attempt by ${userId}`);
        return;
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    await next();
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∫–∏
 */
export function registerAdminHandlers(bot) {
    // –ö–æ–º–∞–Ω–¥–∞ /admin
    bot.command('admin', handleAdminCommand);

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    bot.action('admin_back', handleAdminBack);

    console.log('‚úÖ Admin handlers registered');
}