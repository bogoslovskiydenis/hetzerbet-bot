import { database } from '../../config/services/database.js';
import { t } from '../../locales/i18n.js';
import { getSettingsKeyboard } from '../../utils/keyboards.js';
import { adminMiddleware } from './index.js';

/**
 * –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserLanguage(userId) {
    const user = await database.getUser(userId);
    return user?.language || 'en';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
function formatSettingsMessage(settings, lang) {
    const phoneStatus = settings.phone_number_required
        ? t('admin.settings.phone_enabled', lang)
        : t('admin.settings.phone_disabled', lang);

    return `
${t('admin.settings.title', lang)}

‚è∞ ${t('admin.settings.current_interval', lang, {
        hours: settings.notification_interval_hours || 2
    })}

üì± ${t('admin.settings.phone_status', lang, { status: phoneStatus })}
    `.trim();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
 */
export async function handleSettings(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();

    console.log(`‚öôÔ∏è User ${userId} opened settings`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = await database.getBotSettings();

        if (!settings) {
            await ctx.reply(t('errors.general', lang));
            return;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = formatSettingsMessage(settings, lang);

        await ctx.editMessageText(
            message,
            getSettingsKeyboard(lang)
        );

    } catch (error) {
        console.error('‚ùå Error loading settings:', error);
        await ctx.reply(t('errors.general', lang));
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export async function handleTogglePhone(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    console.log(`üì± User ${userId} toggling phone requirement`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = await database.getBotSettings();
        const newValue = !settings.phone_number_required;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        await database.updateSettings({
            phone_number_required: newValue
        });

        const status = newValue
            ? t('admin.settings.enabled', lang)
            : t('admin.settings.disabled', lang);

        await ctx.answerCbQuery(
            t('admin.settings.phone_toggled', lang, { status })
        );

        console.log(`‚úÖ Phone requirement set to: ${newValue}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        const updatedSettings = await database.getBotSettings();
        const message = formatSettingsMessage(updatedSettings, lang);

        await ctx.editMessageText(
            message,
            getSettingsKeyboard(lang)
        );

    } catch (error) {
        console.error('‚ùå Error toggling phone requirement:', error);
        await ctx.answerCbQuery(t('errors.general', lang));
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function handleNotificationInterval(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();

    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    await ctx.reply(
        '–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.\n\n'
    );

    console.log(`‚è∞ User ${userId} tried to change notification interval`);
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export function registerSettingsHandlers(bot) {
    bot.action('admin_settings', adminMiddleware, handleSettings);
    bot.action('settings_toggle_phone', adminMiddleware, handleTogglePhone);
    bot.action('settings_interval', adminMiddleware, handleNotificationInterval);

    console.log('‚úÖ Settings handlers registered');
}