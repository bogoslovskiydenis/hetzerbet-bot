import { database } from '../../config/services/database.js';
import { t } from '../../locales/i18n.js';
import { getSettingsKeyboard } from '../../utils/keyboards.js';
import { adminMiddleware } from './index.js';

/**
 * –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserLanguage(userId) {
    const user = await database.getUser(userId);
    return user?.language || 'en';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
function formatSettingsMessage(settings, lang) {
    const phoneStatus = settings.phone_number_required
        ? t('admin.settings.phone_enabled', lang)
        : t('admin.settings.phone_disabled', lang);

    const intervalMinutes = settings.notification_interval_minutes || 120;
    const intervalHours = Math.floor(intervalMinutes / 60);
    const remainingMinutes = intervalMinutes % 60;

    let intervalText = '';
    if (intervalHours > 0 && remainingMinutes > 0) {
        intervalText = t('admin.settings.current_interval_hours_minutes', lang, {
            hours: intervalHours,
            minutes: remainingMinutes
        });
    } else if (intervalHours > 0) {
        intervalText = t('admin.settings.current_interval_hours', lang, {
            hours: intervalHours
        });
    } else {
        intervalText = t('admin.settings.current_interval_minutes', lang, {
            minutes: intervalMinutes
        });
    }

    return `
${t('admin.settings.title', lang)}

‚è∞ ${intervalText}

üì± ${t('admin.settings.phone_status', lang, { status: phoneStatus })}
    `.trim();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
 */
export async function handleSettings(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();

    console.log(`‚öôÔ∏è User ${userId} opened settings`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = await database.getBotSettings();

        if (!settings) {
            await ctx.reply(t('errors.general', lang));
            return;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = formatSettingsMessage(settings, lang);

        await ctx.editMessageText(
            message,
            getSettingsKeyboard(lang)
        );

    } catch (error) {
        console.error('‚ùå Error loading settings:', error);
        await ctx.reply(t('errors.general', lang));
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export async function handleTogglePhone(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    console.log(`üì± User ${userId} toggling phone requirement`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = await database.getBotSettings();
        const newValue = !settings.phone_number_required;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        await database.updateSettings({
            phone_number_required: newValue
        });

        const status = newValue
            ? t('admin.settings.enabled', lang)
            : t('admin.settings.disabled', lang);

        await ctx.answerCbQuery(
            t('admin.settings.phone_toggled', lang, { status })
        );

        console.log(`‚úÖ Phone requirement set to: ${newValue}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        const updatedSettings = await database.getBotSettings();
        const message = formatSettingsMessage(updatedSettings, lang);

        await ctx.editMessageText(
            message,
            getSettingsKeyboard(lang)
        );

    } catch (error) {
        console.error('‚ùå Error toggling phone requirement:', error);
        await ctx.answerCbQuery(t('errors.general', lang));
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —á–∞—Å–∞—Ö)
 */
export async function handleNotificationInterval(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();

    console.log(`‚è∞ User ${userId} changing notification interval (hours)`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = await database.getBotSettings();
        const currentInterval = settings.notification_interval_hours || 2;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await ctx.reply(
            t('admin.settings.set_interval', lang) + '\n\n' +
            `–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${currentInterval} —á–∞—Å–æ–≤\n` +
            t('admin.settings.interval_instructions', lang)
        );

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        await database.updateUser(userId, {
            awaiting_input: 'notification_interval'
        });

    } catch (error) {
        console.error('‚ùå Error setting notification interval:', error);
        await ctx.reply(t('errors.general', lang));
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ –º–∏–Ω—É—Ç–∞—Ö)
 */
export async function handleNotificationIntervalMinutes(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();

    console.log(`‚è∞ User ${userId} changing notification interval (minutes)`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = await database.getBotSettings();
        const currentIntervalMinutes = settings.notification_interval_minutes || 120;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await ctx.reply(
            t('admin.settings.set_interval_minutes', lang) + '\n\n' +
            `–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${currentIntervalMinutes} –º–∏–Ω—É—Ç\n` +
            t('admin.settings.interval_minutes_instructions', lang)
        );

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
        await database.updateUser(userId, {
            awaiting_input: 'notification_interval_minutes'
        });

    } catch (error) {
        console.error('‚ùå Error setting notification interval (minutes):', error);
        await ctx.reply(t('errors.general', lang));
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —á–∞—Å–∞—Ö)
 */
export async function handleNotificationIntervalInput(ctx, inputText) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
        if (inputText.toLowerCase() === '/cancel') {
            await database.updateUser(userId, { awaiting_input: null });
            await ctx.reply(t('admin.settings.interval_cancelled', lang));
            return;
        }

        // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const interval = parseInt(inputText.trim());
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (isNaN(interval) || interval < 1 || interval > 24) {
            await ctx.reply(t('admin.settings.interval_invalid', lang));
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
        await database.updateSettings({
            notification_interval_hours: interval,
            notification_interval_minutes: interval * 60
        });

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await database.updateUser(userId, { awaiting_input: null });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—Ö–µ
        await ctx.reply(
            t('admin.settings.interval_success', lang, { hours: interval })
        );

        console.log(`‚úÖ Notification interval updated to ${interval} hours by ${userId}`);

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await restartNotificationScheduler();

    } catch (error) {
        console.error('‚ùå Error processing interval input:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ –º–∏–Ω—É—Ç–∞—Ö)
 */
export async function handleNotificationIntervalMinutesInput(ctx, inputText) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
        if (inputText.toLowerCase() === '/cancel') {
            await database.updateUser(userId, { awaiting_input: null });
            await ctx.reply(t('admin.settings.interval_cancelled', lang));
            return;
        }

        // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const intervalMinutes = parseInt(inputText.trim());
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (isNaN(intervalMinutes) || intervalMinutes < 1 || intervalMinutes > 1440) {
            await ctx.reply(t('admin.settings.interval_minutes_invalid', lang));
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
        const intervalHours = Math.floor(intervalMinutes / 60);
        await database.updateSettings({
            notification_interval_hours: intervalHours,
            notification_interval_minutes: intervalMinutes
        });

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await database.updateUser(userId, { awaiting_input: null });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—Ö–µ
        await ctx.reply(
            t('admin.settings.interval_minutes_success', lang, { minutes: intervalMinutes })
        );

        console.log(`‚úÖ Notification interval updated to ${intervalMinutes} minutes by ${userId}`);

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await restartNotificationScheduler();

    } catch (error) {
        console.error('‚ùå Error processing interval minutes input:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

/**
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
async function restartNotificationScheduler() {
    try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        const { stopNotificationScheduler, startNotificationScheduler } = await import('../../services/notifications.js');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        stopNotificationScheduler();
        
        // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
        const bot = global.bot || global.telegramBot;
        
        if (bot) {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            setTimeout(() => {
                startNotificationScheduler(bot);
            }, 1000);
            
            console.log('üîÑ Notification scheduler restarted with new interval');
        } else {
            console.log('‚ö†Ô∏è Bot instance not found, scheduler will restart on next bot restart');
        }
    } catch (error) {
        console.error('‚ùå Error restarting scheduler:', error);
    }
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export function registerSettingsHandlers(bot) {
    bot.action('admin_settings', adminMiddleware, handleSettings);
    bot.action('settings_toggle_phone', adminMiddleware, handleTogglePhone);
    bot.action('settings_interval', adminMiddleware, handleNotificationInterval);
    bot.action('settings_interval_minutes', adminMiddleware, handleNotificationIntervalMinutes);

    console.log('‚úÖ Settings handlers registered');
}