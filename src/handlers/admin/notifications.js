import { Markup } from 'telegraf';
import { database } from '../../config/services/database.js';
import { t } from '../../locales/i18n.js';
import { adminMiddleware } from './index.js';

/**
 * –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserLanguage(userId) {
    const user = await database.getUser(userId);
    return user?.language || 'en';
}

/**
 * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 */
export async function handleNotifications(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();

    console.log(`üì¢ User ${userId} opened notifications management`);

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback(
            t('admin.notifications.create_new', lang),
            'notification_create'
        )],
        [Markup.button.callback(
            t('admin.notifications.view_list', lang),
            'notification_list'
        )],
        [Markup.button.callback(
            t('admin.notifications.test_send', lang),
            'notification_test'
        )],
        [Markup.button.callback(
            t('admin.button_back', lang),
            'admin_back'
        )]
    ]);

    await ctx.editMessageText(
        'üì¢ –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò\n\n' +
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.',
        keyboard
    );
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function handleCreateNotification(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();

    await ctx.reply(
        '‚ûï –°–û–ó–î–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n' +
        '–ü—Ä–∏–º–µ—Ä: "Welcome Bonus Promo"\n\n' +
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await database.updateUser(userId, {
        awaiting_input: 'notification_name'
    });
}

/**
 * –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function handleNotificationList(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();

    try {
        const templates = await database.getNotificationTemplates();

        if (templates.length === 0) {
            await ctx.reply(
                'üìã –°–ü–ò–°–û–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô\n\n' +
                '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n' +
                '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ "‚ûï –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"'
            );
            return;
        }

        let message = 'üìã –°–ü–ò–°–û–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô\n\n';
        
        templates.forEach((template, index) => {
            message += `${index + 1}. ${template.name}\n`;
            message += `   üìù ${template.text_en.substring(0, 50)}...\n`;
            message += `   üñºÔ∏è ${template.image_url ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}\n`;
            message += `   üîò –ö–Ω–æ–ø–æ–∫: ${template.buttons?.length || 0}\n\n`;
        });

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const keyboard = [];
        templates.forEach((template, index) => {
            keyboard.push([
                Markup.button.callback(
                    `üëÅÔ∏è ${template.name}`,
                    `notification_view_${template.id}`
                )
            ]);
        });

        keyboard.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'admin_notifications')]);

        await ctx.reply(message, Markup.inlineKeyboard(keyboard));

    } catch (error) {
        console.error('‚ùå Error loading notification list:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
    }
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function handleEditNotification(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);
    const templateId = ctx.match[1];

    await ctx.answerCbQuery();

    try {
        const template = await database.getNotificationTemplate(templateId);

        if (!template) {
            await ctx.reply('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }

        const message = `‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø\n\n` +
            `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${template.name}\n` +
            `üá¨üáß EN: ${template.text_en}\n` +
            `üá©üá™ DE: ${template.text_de}\n` +
            `üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${template.image_url || '–ù–µ—Ç'}\n` +
            `üîò –ö–Ω–æ–ø–æ–∫: ${template.buttons?.length || 0}\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', `notification_edit_text_${templateId}`)],
            [Markup.button.callback('üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', `notification_edit_image_${templateId}`)],
            [Markup.button.callback('üîò –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏', `notification_edit_buttons_${templateId}`)],
            [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `notification_delete_${templateId}`)],
            [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'notification_list')]
        ]);

        await ctx.editMessageText(message, keyboard);

    } catch (error) {
        console.error('‚ùå Error editing notification:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
    }
}

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function handleTestNotification(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
        const template = await database.getRandomNotificationTemplate(lang);

        if (!template) {
            await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (template.image_url) {
            await ctx.replyWithPhoto(
                template.image_url,
                {
                    caption: `üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï\n\n${template.text}`,
                    ...Markup.inlineKeyboard(template.buttons.map(btn => 
                        [Markup.button.url(btn.text, btn.url)]
                    ))
                }
            );
        } else {
            await ctx.reply(
                `üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï\n\n${template.text}`,
                Markup.inlineKeyboard(template.buttons.map(btn => 
                    [Markup.button.url(btn.text, btn.url)]
                ))
            );
        }

        await ctx.reply('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');

    } catch (error) {
        console.error('‚ùå Error sending test notification:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function handleEditNotificationText(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);
    const templateId = ctx.match[1];

    await ctx.answerCbQuery();

    try {
        const template = await database.getNotificationTemplate(templateId);
        
        if (!template) {
            await ctx.reply('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }

        await ctx.reply(
            `üìù –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê\n\n` +
            `–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n` +
            `üá¨üáß EN: ${template.text_en}\n\n` +
            `üá©üá™ DE: ${template.text_de}\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`,
            Markup.inlineKeyboard([
                [Markup.button.callback('üá¨üáß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π', `notification_edit_text_en_${templateId}`)],
                [Markup.button.callback('üá©üá™ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–º–µ—Ü–∫–∏–π', `notification_edit_text_de_${templateId}`)],
                [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', `notification_view_${templateId}`)]
            ])
        );

    } catch (error) {
        console.error('‚ùå Error editing notification text:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 */
export async function handleEditNotificationTextEn(ctx) {
    const userId = ctx.from.id;
    const templateId = ctx.match[1];

    await ctx.answerCbQuery();

    try {
        const template = await database.getNotificationTemplate(templateId);
        
        if (!template) {
            await ctx.reply('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }

        await ctx.reply(
            `üá¨üáß –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ì–õ–ò–ô–°–ö–û–ì–û –¢–ï–ö–°–¢–ê\n\n` +
            `–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n${template.text_en}\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:\n\n` +
            `–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel`,
            { reply_markup: { remove_keyboard: true } }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await database.updateUser(userId, {
            awaiting_input: 'notification_edit_text_en',
            temp_edit_template_id: templateId
        });

    } catch (error) {
        console.error('‚ùå Error editing EN text:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 */
export async function handleEditNotificationTextDe(ctx) {
    const userId = ctx.from.id;
    const templateId = ctx.match[1];

    await ctx.answerCbQuery();

    try {
        const template = await database.getNotificationTemplate(templateId);
        
        if (!template) {
            await ctx.reply('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }

        await ctx.reply(
            `üá©üá™ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï–ú–ï–¶–ö–û–ì–û –¢–ï–ö–°–¢–ê\n\n` +
            `–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n${template.text_de}\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ:\n\n` +
            `–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel`,
            { reply_markup: { remove_keyboard: true } }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await database.updateUser(userId, {
            awaiting_input: 'notification_edit_text_de',
            temp_edit_template_id: templateId
        });

    } catch (error) {
        console.error('‚ùå Error editing DE text:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export async function handleEditNotificationImage(ctx) {
    const userId = ctx.from.id;
    const templateId = ctx.match[1];

    await ctx.answerCbQuery();

    try {
        const template = await database.getNotificationTemplate(templateId);
        
        if (!template) {
            await ctx.reply('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }

        await ctx.reply(
            `üñºÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø\n\n` +
            `–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${template.image_url || '–ù–µ—Ç'}\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ 'skip' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n` +
            `–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel`,
            { reply_markup: { remove_keyboard: true } }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await database.updateUser(userId, {
            awaiting_input: 'notification_edit_image',
            temp_edit_template_id: templateId
        });

    } catch (error) {
        console.error('‚ùå Error editing image:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
 */
export async function handleEditNotificationButtons(ctx) {
    const userId = ctx.from.id;
    const templateId = ctx.match[1];

    await ctx.answerCbQuery();

    try {
        const template = await database.getNotificationTemplate(templateId);
        
        if (!template) {
            await ctx.reply('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }

        let currentButtons = '–ù–µ—Ç –∫–Ω–æ–ø–æ–∫';
        if (template.buttons && template.buttons.length > 0) {
            currentButtons = template.buttons.map((btn, index) => 
                `${index + 1}. ${btn.text} ‚Üí ${btn.url}`
            ).join('\n');
        }

        await ctx.reply(
            `üîò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–ù–û–ü–û–ö\n\n` +
            `–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:\n${currentButtons}\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
            `–¢–µ–∫—Å—Ç | URL\n` +
            `–¢–µ–∫—Å—Ç | URL\n\n` +
            `–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'skip' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫\n` +
            `–ú–∞–∫—Å–∏–º—É–º 8 –∫–Ω–æ–ø–æ–∫\n\n` +
            `–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel`,
            { reply_markup: { remove_keyboard: true } }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await database.updateUser(userId, {
            awaiting_input: 'notification_edit_buttons',
            temp_edit_template_id: templateId
        });

    } catch (error) {
        console.error('‚ùå Error editing buttons:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function handleViewNotificationDetails(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);
    
    try {
        const templateId = ctx.match[1];
        const template = await database.getNotificationTemplate(templateId);
        
        if (!template) {
            await ctx.reply('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }

        const preview = formatNotificationPreview(template, lang);
        
        await ctx.reply(
            `üìã **${template.name}**\n\n${preview}`,
            {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [
                        Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `notification_edit_${templateId}`),
                        Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `notification_delete_${templateId}`)
                    ],
                    [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'notification_list')]
                ]).reply_markup
            }
        );

    } catch (error) {
        console.error('‚ùå Error viewing notification details:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function handleDeleteNotification(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);
    
    try {
        const templateId = ctx.match[1];
        const template = await database.getNotificationTemplate(templateId);
        
        if (!template) {
            await ctx.reply('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }

        await ctx.reply(
            `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "${template.name}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`,
            Markup.inlineKeyboard([
                [
                    Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `notification_confirm_delete_${templateId}`),
                    Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'notification_list')
                ]
            ])
        );

    } catch (error) {
        console.error('‚ùå Error handling delete notification:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function handleConfirmDeleteNotification(ctx) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);
    
    try {
        const templateId = ctx.match[1];
        const template = await database.getNotificationTemplate(templateId);
        
        if (!template) {
            await ctx.reply('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }

        const success = await database.deleteNotificationTemplate(templateId);
        
        if (success) {
            await ctx.reply(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "${template.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!`);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await handleNotificationList(ctx);
        } else {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
        }

    } catch (error) {
        console.error('‚ùå Error confirming delete notification:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function handleNotificationInput(ctx, inputText) {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    try {
        const user = await database.getUser(userId);
        const awaitingInput = user.awaiting_input;

        if (awaitingInput === 'notification_name') {
            await handleNotificationNameInput(ctx, inputText);
        } else if (awaitingInput === 'notification_text_en') {
            await handleNotificationTextInput(ctx, inputText, 'en');
        } else if (awaitingInput === 'notification_text_de') {
            await handleNotificationTextInput(ctx, inputText, 'de');
        } else if (awaitingInput === 'notification_image') {
            await handleNotificationImageInput(ctx, inputText);
        } else if (awaitingInput === 'notification_buttons') {
            await handleNotificationButtonsInput(ctx, inputText);
        } else if (awaitingInput === 'notification_edit_text_en') {
            await handleEditTextEnInput(ctx, inputText);
        } else if (awaitingInput === 'notification_edit_text_de') {
            await handleEditTextDeInput(ctx, inputText);
        } else if (awaitingInput === 'notification_edit_image') {
            await handleEditImageInput(ctx, inputText);
        } else if (awaitingInput === 'notification_edit_buttons') {
            await handleEditButtonsInput(ctx, inputText);
        }

    } catch (error) {
        console.error('‚ùå Error processing notification input:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
async function handleNotificationNameInput(ctx, name) {
    const userId = ctx.from.id;

    if (name.toLowerCase() === '/cancel') {
        await database.updateUser(userId, { awaiting_input: null });
        await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    await database.updateUser(userId, {
        awaiting_input: 'notification_text_en',
        temp_notification_name: name
    });

    await ctx.reply(
        'üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:\n\n' +
        '–ü—Ä–∏–º–µ—Ä:\n' +
        'üé∞ Play and win big at Hertzbet!\n\n' +
        'üí∞ Get up to 500‚Ç¨ welcome bonus!\n' +
        'üéÅ Free spins waiting for you!\n\n' +
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
async function handleNotificationTextInput(ctx, text, language) {
    const userId = ctx.from.id;

    if (text.toLowerCase() === '/cancel') {
        await database.updateUser(userId, { awaiting_input: null });
        await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }

    const user = await database.getUser(userId);
    const fieldName = `temp_notification_text_${language}`;

    await database.updateUser(userId, {
        [fieldName]: text
    });

    if (language === 'en') {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ–º–µ—Ü–∫–∏–π —Ç–µ–∫—Å—Ç
        await database.updateUser(userId, {
            awaiting_input: 'notification_text_de'
        });

        await ctx.reply(
            'üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ:\n\n' +
            '–ü—Ä–∏–º–µ—Ä:\n' +
            'üé∞ Spielen und gro√ü gewinnen bei Hertzbet!\n\n' +
            'üí∞ Bis zu 500‚Ç¨ Willkommensbonus!\n' +
            'üéÅ Freispiele warten auf Sie!\n\n' +
            '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
        );
    } else {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await database.updateUser(userId, {
            awaiting_input: 'notification_image'
        });

        await ctx.reply(
            'üñºÔ∏è –í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):\n\n' +
            '–ü—Ä–∏–º–µ—Ä: https://example.com/image.jpg\n\n' +
            '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
        );
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function handleNotificationImageInput(ctx, imageUrl) {
    const userId = ctx.from.id;

    if (imageUrl.toLowerCase() === '/cancel') {
        await database.updateUser(userId, { awaiting_input: null });
        await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }

    const imageUrlToSave = imageUrl.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ? null : imageUrl;

    await database.updateUser(userId, {
        awaiting_input: 'notification_buttons',
        temp_notification_image: imageUrlToSave
    });

    await ctx.reply(
        'üîò –í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ (–∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):\n\n' +
        '–§–æ—Ä–º–∞—Ç: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | URL\n' +
        '–ü—Ä–∏–º–µ—Ä:\n' +
        'üé∞ –ò–≥—Ä–∞—Ç—å | https://hertzbet.com\n' +
        'üéÅ –ë–æ–Ω—É—Å | https://hertzbet.com/bonus\n\n' +
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
async function handleNotificationButtonsInput(ctx, buttonsText) {
    const userId = ctx.from.id;

    if (buttonsText.toLowerCase() === '/cancel') {
        await database.updateUser(userId, { awaiting_input: null });
        await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }

    try {
        const user = await database.getUser(userId);
        
        // –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏
        let buttons = [];
        if (buttonsText.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
            const buttonLines = buttonsText.split('\n').filter(line => line.trim());
            buttons = buttonLines.map(line => {
                const [text, url] = line.split('|').map(s => s.trim());
                return { text, url };
            }).filter(btn => btn.text && btn.url);
        }

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const templateId = await database.createNotificationTemplate({
            name: user.temp_notification_name,
            text_en: user.temp_notification_text_en,
            text_de: user.temp_notification_text_de,
            image_url: user.temp_notification_image,
            buttons: buttons,
            admin_id: userId
        });

        if (templateId) {
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await database.updateUser(userId, {
                awaiting_input: null,
                temp_notification_name: null,
                temp_notification_text_en: null,
                temp_notification_text_de: null,
                temp_notification_image: null
            });

            await ctx.reply(
                '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n' +
                `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${user.temp_notification_name}\n` +
                `üîò –ö–Ω–æ–ø–æ–∫: ${buttons.length}\n` +
                `üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${user.temp_notification_image ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`
            );
        } else {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
        }

    } catch (error) {
        console.error('‚ùå Error creating notification:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
    }
}


/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 */
async function handleEditTextEnInput(ctx, inputText) {
    const userId = ctx.from.id;

    if (inputText.toLowerCase() === '/cancel') {
        await database.updateUser(userId, { awaiting_input: null });
        await ctx.reply('‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }

    try {
        const user = await database.getUser(userId);
        const templateId = user.temp_edit_template_id;

        if (!templateId) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        const success = await database.updateNotificationTemplate(templateId, {
            text_en: inputText
        });

        if (success) {
            await ctx.reply('‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await database.updateUser(userId, { 
                awaiting_input: null,
                temp_edit_template_id: null
            });

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            ctx.match = [null, templateId];
            await handleViewNotificationDetails(ctx);
        } else {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.');
        }

    } catch (error) {
        console.error('‚ùå Error updating EN text:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 */
async function handleEditTextDeInput(ctx, inputText) {
    const userId = ctx.from.id;

    if (inputText.toLowerCase() === '/cancel') {
        await database.updateUser(userId, { awaiting_input: null });
        await ctx.reply('‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }

    try {
        const user = await database.getUser(userId);
        const templateId = user.temp_edit_template_id;

        if (!templateId) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–º–µ—Ü–∫–∏–π —Ç–µ–∫—Å—Ç
        const success = await database.updateNotificationTemplate(templateId, {
            text_de: inputText
        });

        if (success) {
            await ctx.reply('‚úÖ –ù–µ–º–µ—Ü–∫–∏–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await database.updateUser(userId, { 
                awaiting_input: null,
                temp_edit_template_id: null
            });

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            ctx.match = [null, templateId];
            await handleViewNotificationDetails(ctx);
        } else {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.');
        }

    } catch (error) {
        console.error('‚ùå Error updating DE text:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function handleEditImageInput(ctx, inputText) {
    const userId = ctx.from.id;

    if (inputText.toLowerCase() === '/cancel') {
        await database.updateUser(userId, { awaiting_input: null });
        await ctx.reply('‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }

    try {
        const user = await database.getUser(userId);
        const templateId = user.temp_edit_template_id;

        if (!templateId) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        let imageUrl = null;
        if (inputText.toLowerCase() !== 'skip') {
            imageUrl = inputText;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const success = await database.updateNotificationTemplate(templateId, {
            image_url: imageUrl
        });

        if (success) {
            await ctx.reply('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await database.updateUser(userId, { 
                awaiting_input: null,
                temp_edit_template_id: null
            });

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            ctx.match = [null, templateId];
            await handleViewNotificationDetails(ctx);
        } else {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
        }

    } catch (error) {
        console.error('‚ùå Error updating image:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
 */
async function handleEditButtonsInput(ctx, inputText) {
    const userId = ctx.from.id;

    if (inputText.toLowerCase() === '/cancel') {
        await database.updateUser(userId, { awaiting_input: null });
        await ctx.reply('‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
    }

    try {
        const user = await database.getUser(userId);
        const templateId = user.temp_edit_template_id;

        if (!templateId) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        let buttons = [];
        if (inputText.toLowerCase() !== 'skip') {
            const buttonLines = inputText.split('\n').filter(line => line.trim());
            
            if (buttonLines.length > 8) {
                await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–Ω–æ–ø–æ–∫! –ú–∞–∫—Å–∏–º—É–º 8 –∫–Ω–æ–ø–æ–∫.');
                return;
            }

            buttons = buttonLines.map(line => {
                const [text, url] = line.split('|').map(s => s.trim());
                return { text, url };
            }).filter(btn => btn.text && btn.url);

            if (buttons.length !== buttonLines.length) {
                await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¢–µ–∫—Å—Ç | URL');
                return;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        const success = await database.updateNotificationTemplate(templateId, {
            buttons: buttons
        });

        if (success) {
            await ctx.reply('‚úÖ –ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await database.updateUser(userId, { 
                awaiting_input: null,
                temp_edit_template_id: null
            });

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            ctx.match = [null, templateId];
            await handleViewNotificationDetails(ctx);
        } else {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫.');
        }

    } catch (error) {
        console.error('‚ùå Error updating buttons:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫.');
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
function formatNotificationPreview(template, language) {
    const text = language === 'de' ? template.text_de : template.text_en;
    let preview = `üìù **–¢–µ–∫—Å—Ç:**\n${text}`;
    
    if (template.image_url) {
        preview += `\n\nüñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:**\n${template.image_url}`;
    }
    
    if (template.buttons && template.buttons.length > 0) {
        preview += `\n\nüîó **–ö–Ω–æ–ø–∫–∏:**`;
        template.buttons.forEach((button, index) => {
            preview += `\n${index + 1}. ${button.text} ‚Üí ${button.url}`;
        });
    }
    
    preview += `\n\nüìÖ **–°–æ–∑–¥–∞–Ω–æ:** ${new Date(template.created_at).toLocaleString()}`;
    preview += `\nüë§ **–ê–≤—Ç–æ—Ä:** ${template.admin_id}`;
    
    return preview;
}

export function registerNotificationHandlers(bot) {
    bot.action('admin_notifications', adminMiddleware, handleNotifications);
    bot.action('notification_create', adminMiddleware, handleCreateNotification);
    bot.action('notification_list', adminMiddleware, handleNotificationList);
    bot.action('notification_test', adminMiddleware, handleTestNotification);
    
    // –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    bot.action(/notification_view_(.+)/, adminMiddleware, handleViewNotificationDetails);
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    bot.action(/notification_edit_text_(.+)/, adminMiddleware, handleEditNotificationText);
    bot.action(/notification_edit_text_en_(.+)/, adminMiddleware, handleEditNotificationTextEn);
    bot.action(/notification_edit_text_de_(.+)/, adminMiddleware, handleEditNotificationTextDe);
    bot.action(/notification_edit_image_(.+)/, adminMiddleware, handleEditNotificationImage);
    bot.action(/notification_edit_buttons_(.+)/, adminMiddleware, handleEditNotificationButtons);
    bot.action(/notification_edit_(.+)/, adminMiddleware, handleEditNotification);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    bot.action(/notification_delete_(.+)/, adminMiddleware, handleDeleteNotification);
    bot.action(/notification_confirm_delete_(.+)/, adminMiddleware, handleConfirmDeleteNotification);

    console.log('‚úÖ Notification handlers registered');
}

