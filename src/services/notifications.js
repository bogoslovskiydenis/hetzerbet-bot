import { Markup } from 'telegraf';
import { database } from '../config/services/database.js';
import { t } from '../locales/i18n.js';
import { getMainKeyboard } from '../utils/keyboards.js';

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ë–î
 */
async function getRandomPromo(language) {
    try {
        const template = await database.getRandomNotificationTemplate(language);
        
        if (template) {
            return {
                text: template.text,
                image: template.image_url,
                buttons: template.buttons || []
            };
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ë–î - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
        console.log('‚ö†Ô∏è No notification templates in DB, please create some via admin panel');
        return null;
        
    } catch (error) {
        console.error('‚ùå Error getting random promo:', error);
        return {
            text: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`,
            image: null
        };
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function canSendNotification(user, settings) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –í–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // if (!user.notifications_enabled) {
    //     return false;
    // }
    //
    // // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –¢–∏—Ö–∏–µ —á–∞—Å—ã (quiet hours) - –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –¢–ï–°–¢–ê
    // if (settings.notification_schedule?.enabled) {
    //     const now = new Date();
    //     const currentHour = now.getHours();
    //     const quietStart = settings.notification_schedule.quiet_hours_start || 23;
    //     const quietEnd = settings.notification_schedule.quiet_hours_end || 8;

    //     if (quietStart > quietEnd) {
    //         if (currentHour >= quietStart || currentHour < quietEnd) {
    //             console.log(`üîá User ${user.user_id} in quiet hours`);
    //             return false;
    //         }
    //     } else {
    //         if (currentHour >= quietStart && currentHour < quietEnd) {
    //             console.log(`üîá User ${user.user_id} in quiet hours`);
    //             return false;
    //         }
    //     }
    // }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –õ–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å - –£–í–ï–õ–ò–ß–ï–ù –î–õ–Ø –¢–ï–°–¢–ê
    const maxPerDay = 100; // –ë—ã–ª–æ: 12
    const todayCount = await database.getTodayNotificationCount(user.user_id);

    if (todayCount >= maxPerDay) {
        console.log(`üö´ User ${user.user_id} reached daily limit (${todayCount}/${maxPerDay})`);
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ - –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –¢–ï–°–¢–ê
    // if (user.last_notification_time) {
    //     const lastNotification = user.last_notification_time.toDate ?
    //         user.last_notification_time.toDate() :
    //         new Date(user.last_notification_time);

    //     const intervalHours = settings.notification_interval_hours || 2;
    //     const minInterval = intervalHours * 60 * 60 * 1000;
    //     const timeSinceLastNotification = Date.now() - lastNotification.getTime();

    //     if (timeSinceLastNotification < minInterval) {
    //         console.log(`‚è∞ User ${user.user_id} notification too soon`);
    //         return false;
    //     }
    // }

    return true;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function sendPromoToUser(bot, user) {
    try {
        const language = user.language || 'en';
        const promo = await getRandomPromo(language);

        // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–º–æ-—à–∞–±–ª–æ–Ω–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        if (!promo) {
            console.log(`‚è≠Ô∏è No promo templates available, skipping user ${user.user_id}`);
            return false;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫ —à–∞–±–ª–æ–Ω–∞
        let keyboard = null;
        if (promo.buttons && promo.buttons.length > 0) {
            keyboard = Markup.inlineKeyboard(
                promo.buttons.map(btn => [Markup.button.url(btn.text, btn.url)])
            );
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        if (promo.image) {
            await bot.telegram.sendPhoto(
                user.user_id,
                promo.image,
                {
                    caption: promo.text,
                    ...(keyboard || {})
                }
            );
        } else {
            await bot.telegram.sendMessage(
                user.user_id,
                promo.text,
                keyboard || {}
            );
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –ë–î
        await database.logNotification(user.user_id, {
            text: promo.text,
            media_url: promo.image,
            status: 'sent'
        });

        console.log(`‚úÖ Promo sent to user ${user.user_id}`);
        return true;

    } catch (error) {
        console.error(`‚ùå Failed to send promo to ${user.user_id}:`, error.message);

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await database.logNotification(user.user_id, {
            text: 'Failed to send',
            status: 'failed'
        });

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ - –æ—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (error.message.includes('blocked') || error.message.includes('bot was blocked')) {
            await database.updateUser(user.user_id, {
                notifications_enabled: false
            });
            console.log(`üö´ User ${user.user_id} blocked bot, notifications disabled`);
        }

        return false;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
export async function sendScheduledPromos(bot) {
    console.log('\nüöÄ Starting scheduled promo notification round...');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = await database.getBotSettings();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const templates = await database.getNotificationTemplates();
        if (templates.length === 0) {
            console.log('‚ö†Ô∏è No notification templates found, skipping promo round');
            return {
                sent: 0,
                skipped: 0,
                failed: 0,
                total: 0
            };
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        const users = await database.getUsersWithNotifications();

        console.log(`üìä Found ${users.length} users with notifications enabled`);

        let sentCount = 0;
        let skippedCount = 0;
        let failedCount = 0;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for (const user of users) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const canSend = await canSendNotification(user, settings);

            if (!canSend) {
                skippedCount++;
                continue;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ
            const sent = await sendPromoToUser(bot, user);

            if (sent) {
                sentCount++;
            } else {
                failedCount++;
            }

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)
            if (sentCount % 30 === 0 && sentCount > 0) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

        console.log(`\n‚úÖ Promo round completed:`);
        console.log(`   üì§ Sent: ${sentCount}`);
        console.log(`   ‚è≠Ô∏è  Skipped: ${skippedCount}`);
        console.log(`   ‚ùå Failed: ${failedCount}`);
        console.log(`   üë• Total: ${users.length}`);

        return {
            sent: sentCount,
            skipped: skippedCount,
            failed: failedCount,
            total: users.length
        };

    } catch (error) {
        console.error('‚ùå Error in scheduled promo round:', error);
        return null;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
let notificationInterval = null;

/**
 * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export function startNotificationScheduler(bot) {
    console.log('\n‚è∞ Starting notification scheduler...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (notificationInterval) {
        clearInterval(notificationInterval);
        notificationInterval = null;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    database.getBotSettings().then(settings => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—ã
        const intervalMinutes = settings?.notification_interval_minutes || (settings?.notification_interval_hours || 2) * 60;
        const intervalMs = intervalMinutes * 60 * 1000;

        console.log(`‚úÖ Notification scheduler started`);
        console.log(`   Interval: ${intervalMinutes} minutes`);
        console.log(`   Next promo round: ${new Date(Date.now() + intervalMs).toLocaleString()}`);

        // –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        setTimeout(() => {
            sendScheduledPromos(bot);
        }, 30 * 1000);

        // –†–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
        notificationInterval = setInterval(async () => {
            await sendScheduledPromos(bot);
        }, intervalMs);
    });
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export function stopNotificationScheduler() {
    if (notificationInterval) {
        clearInterval(notificationInterval);
        notificationInterval = null;
        console.log('‚èπÔ∏è Notification scheduler stopped');
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–æ–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
 */
export async function sendTestPromo(bot, adminId, language) {
    try {
        const promo = await getRandomPromo(language);
        const keyboard = getMainKeyboard(language);

        await bot.telegram.sendPhoto(
            adminId,
            promo.image,
            {
                caption: `üß™ TEST PROMO\n\n${promo.text}`,
                ...keyboard
            }
        );

        console.log(`‚úÖ Test promo sent to admin ${adminId}`);
        return true;

    } catch (error) {
        console.error(`‚ùå Failed to send test promo:`, error);
        return false;
    }
}