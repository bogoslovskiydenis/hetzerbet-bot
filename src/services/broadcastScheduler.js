import { Markup } from 'telegraf';
import { database } from '../config/services/database.js';
import { t } from '../locales/i18n.js';

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
 */
class BroadcastScheduler {
    constructor() {
        this.bot = null;
        this.checkInterval = null;
        this.isRunning = false;
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
     */
    start(bot) {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è Broadcast scheduler already running');
            return;
        }

        this.bot = bot;
        this.isRunning = true;

        console.log('üìÖ Broadcast scheduler started');
        console.log('   Adaptive checking: 30 sec if broadcast within 10 min, else 5 min');

        // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        this.checkInterval = setInterval(async () => {
            await this.adaptiveCheck();
        }, 30 * 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        setTimeout(() => {
            this.adaptiveCheck();
        }, 5000);
    }

    async adaptiveCheck() {
        try {
            const scheduledBroadcasts = await database.getScheduledBroadcasts();

            if (!scheduledBroadcasts || scheduledBroadcasts.length === 0) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
                return;
            }

            const now = new Date();
            let nearestBroadcast = null;
            let minTimeLeft = Infinity;

            // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Ä–∞—Å—Å—ã–ª–∫—É
            for (const broadcast of scheduledBroadcasts) {
                const scheduledTime = broadcast.scheduled_time.toDate ?
                    broadcast.scheduled_time.toDate() :
                    new Date(broadcast.scheduled_time);

                const timeLeft = scheduledTime - now;

                if (timeLeft < minTimeLeft) {
                    minTimeLeft = timeLeft;
                    nearestBroadcast = broadcast;
                }
            }

            // –ï—Å–ª–∏ –±–ª–∏–∂–∞–π—à–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10 –º–∏–Ω—É—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ
            if (minTimeLeft <= 10 * 60 * 1000) {
                console.log(`\nüîç Checking scheduled broadcasts at ${now.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`);
                await this.checkAndSendScheduledBroadcasts();
            } else {
                // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                const minutesLeft = Math.round(minTimeLeft / 1000 / 60);
                console.log(`‚è∞ Next broadcast in ${minutesLeft} minutes (ID: ${nearestBroadcast.id})`);
            }

        } catch (error) {
            console.error('‚ùå Error in adaptive check:', error);
        }
    }


    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
     */
    stop() {
        if (this.checkInterval) {
            clearInterval(this.checkInterval);
            this.checkInterval = null;
        }
        this.isRunning = false;
        console.log('‚èπÔ∏è Broadcast scheduler stopped');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
     */
    async checkAndSendScheduledBroadcasts() {
        try {
            const now = new Date();
            console.log(`\nüîç Checking scheduled broadcasts at ${now.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            const scheduledBroadcasts = await database.getScheduledBroadcasts();

            if (!scheduledBroadcasts || scheduledBroadcasts.length === 0) {
                console.log('   No scheduled broadcasts found');
                return;
            }

            console.log(`   Found ${scheduledBroadcasts.length} scheduled broadcast(s)`);

            for (const broadcast of scheduledBroadcasts) {
                const scheduledTime = broadcast.scheduled_time.toDate ?
                    broadcast.scheduled_time.toDate() :
                    new Date(broadcast.scheduled_time);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                if (scheduledTime <= now) {
                    console.log(`\nüì§ Time to send broadcast ${broadcast.id}`);
                    await this.sendScheduledBroadcast(broadcast);
                } else {
                    const minutesLeft = Math.round((scheduledTime - now) / 1000 / 60);
                    console.log(`   Broadcast ${broadcast.id} scheduled in ${minutesLeft} minutes`);
                }
            }

        } catch (error) {
            console.error('‚ùå Error checking scheduled broadcasts:', error);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
     */
    async sendScheduledBroadcast(broadcast) {
        try {
            console.log(`üì¢ Starting scheduled broadcast ${broadcast.id}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "in_progress"
            await database.updateBroadcast(broadcast.id, {
                status: 'in_progress',
                started_at: new Date()
            });

            // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
            let targetUsers = [];
            if (broadcast.target_language === 'all') {
                targetUsers = await database.getUsersWithNotifications();
            } else {
                targetUsers = await database.getUsersWithNotifications(broadcast.target_language);
            }

            console.log(`   Target audience: ${targetUsers.length} users`);

            // –û–±–Ω–æ–≤–ª—è–µ–º total_count
            await database.updateBroadcast(broadcast.id, {
                total_count: targetUsers.length
            });

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            let buttonsKeyboard = null;
            if (broadcast.buttons && broadcast.buttons.length > 0) {
                const buttonRows = [];
                for (const btn of broadcast.buttons) {
                    buttonRows.push([Markup.button.url(btn.text, btn.url)]);
                }
                buttonsKeyboard = Markup.inlineKeyboard(buttonRows);
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            let sentCount = 0;
            let failedCount = 0;

            for (let i = 0; i < targetUsers.length; i++) {
                const user = targetUsers[i];

                try {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (broadcast.media_url) {
                        if (broadcast.media_type === 'photo') {
                            await this.bot.telegram.sendPhoto(user.user_id, broadcast.media_url, {
                                caption: broadcast.text,
                                ...buttonsKeyboard
                            });
                        } else if (broadcast.media_type === 'video') {
                            await this.bot.telegram.sendVideo(user.user_id, broadcast.media_url, {
                                caption: broadcast.text,
                                ...buttonsKeyboard
                            });
                        } else if (broadcast.media_type === 'animation') {
                            await this.bot.telegram.sendAnimation(user.user_id, broadcast.media_url, {
                                caption: broadcast.text,
                                ...buttonsKeyboard
                            });
                        }
                    } else {
                        await this.bot.telegram.sendMessage(user.user_id, broadcast.text, buttonsKeyboard);
                    }

                    sentCount++;

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)
                    if (i % 30 === 0 && i > 0) {
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }

                } catch (error) {
                    console.error(`   Failed to send to ${user.user_id}:`, error.message);
                    failedCount++;

                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                    if (error.message.includes('blocked') || error.message.includes('bot was blocked')) {
                        await database.updateUser(user.user_id, {
                            notifications_enabled: false
                        });
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if (i % 50 === 0 && i > 0) {
                    await database.updateBroadcast(broadcast.id, {
                        sent_count: sentCount,
                        failed_count: failedCount
                    });
                }
            }

            // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await database.updateBroadcast(broadcast.id, {
                status: 'completed',
                sent_count: sentCount,
                failed_count: failedCount,
                completed_at: new Date()
            });

            console.log(`‚úÖ Scheduled broadcast ${broadcast.id} completed:`);
            console.log(`   Sent: ${sentCount}/${targetUsers.length}`);
            console.log(`   Failed: ${failedCount}`);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
            try {
                const adminId = broadcast.created_by;
                const user = await database.getUser(adminId);
                const lang = user?.language || 'en';

                await this.bot.telegram.sendMessage(
                    adminId,
                    `‚úÖ ${t('admin.broadcast.scheduled_completed', lang)}\n\n` +
                    `üì§ ${t('admin.broadcast.sent', lang)}: ${sentCount}\n` +
                    `‚ùå ${t('admin.broadcast.failed', lang)}: ${failedCount}\n` +
                    `üë• ${t('admin.broadcast.total', lang)}: ${targetUsers.length}\n\n` +
                    `üïê ${t('admin.broadcast.scheduled_time', lang)}: ${broadcast.scheduled_time.toDate().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`
                );
            } catch (error) {
                console.error('   Failed to notify admin:', error.message);
            }

        } catch (error) {
            console.error(`‚ùå Error sending scheduled broadcast ${broadcast.id}:`, error);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
            await database.updateBroadcast(broadcast.id, {
                status: 'failed',
                completed_at: new Date()
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
     */
    getStats() {
        return {
            isRunning: this.isRunning,
            hasBot: this.bot !== null
        };
    }
}

// –°–æ–∑–¥–∞–µ–º singleton
export const broadcastScheduler = new BroadcastScheduler();

/**
 * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
 */
export function startBroadcastScheduler(bot) {
    broadcastScheduler.start(bot);
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
 */
export function stopBroadcastScheduler() {
    broadcastScheduler.stop();
}