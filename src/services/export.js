import ExcelJS from 'exceljs';
import { database } from '../config/services/database.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const TEMP_DIR = path.join(__dirname, '../../temp');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(TEMP_DIR)) {
    fs.mkdirSync(TEMP_DIR, { recursive: true });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function formatDate(timestamp) {
    if (!timestamp) return 'N/A';

    try {
        const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
        return date.toLocaleString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch (error) {
        return 'Invalid Date';
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel (.xlsx)
 */
export async function exportToExcel() {
    console.log('üìä Starting Excel export...');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await database.getAllUsers();

        if (!users || users.length === 0) {
            throw new Error('No users found');
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Users');

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        worksheet.columns = [
            { header: 'User ID', key: 'user_id', width: 15 },
            { header: 'Username', key: 'username', width: 20 },
            { header: 'First Name', key: 'first_name', width: 20 },
            { header: 'Language', key: 'language', width: 12 },
            { header: 'Phone Number', key: 'phone_number', width: 18 },
            { header: 'Subscribed', key: 'is_subscribed', width: 12 },
            { header: 'Notifications', key: 'notifications_enabled', width: 15 },
            { header: 'Notifications Count', key: 'notifications_count', width: 18 },
            { header: 'Registration Date', key: 'registration_date', width: 20 },
            { header: 'Last Activity', key: 'last_activity', width: 20 },
            { header: 'Onboarding Completed', key: 'onboarding_completed', width: 20 },
            { header: 'Onboarding Step', key: 'onboarding_step', width: 20 }
        ];

        // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        worksheet.getRow(1).font = { bold: true };
        worksheet.getRow(1).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FF4472C4' }
        };
        worksheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFFFF' } };

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users.forEach(user => {
            worksheet.addRow({
                user_id: user.user_id,
                username: user.username || 'N/A',
                first_name: user.first_name || 'N/A',
                language: user.language || 'Not set',
                phone_number: user.phone_number || 'N/A',
                is_subscribed: user.is_subscribed ? 'Yes' : 'No',
                notifications_enabled: user.notifications_enabled ? 'Yes' : 'No',
                notifications_count: user.notifications_count || 0,
                registration_date: formatDate(user.registration_date),
                last_activity: formatDate(user.last_activity),
                onboarding_completed: user.onboarding_completed ? 'Yes' : 'No',
                onboarding_step: user.onboarding_step || 'N/A'
            });
        });

        // –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        worksheet.columns.forEach(column => {
            column.alignment = { vertical: 'middle', horizontal: 'left' };
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        const filename = `users_export_${Date.now()}.xlsx`;
        const filepath = path.join(TEMP_DIR, filename);

        await workbook.xlsx.writeFile(filepath);

        console.log(`‚úÖ Excel file created: ${filename}`);
        console.log(`   Total users: ${users.length}`);

        return {
            success: true,
            filepath,
            filename,
            count: users.length
        };

    } catch (error) {
        console.error('‚ùå Error creating Excel file:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
 */
export async function exportToCSV() {
    console.log('üìÑ Starting CSV export...');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await database.getAllUsers();

        if (!users || users.length === 0) {
            throw new Error('No users found');
        }

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV
        const headers = [
            'User ID',
            'Username',
            'First Name',
            'Language',
            'Phone Number',
            'Subscribed',
            'Notifications',
            'Notifications Count',
            'Registration Date',
            'Last Activity',
            'Onboarding Completed',
            'Onboarding Step'
        ];

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ CSV
        const rows = users.map(user => [
            user.user_id,
            user.username || 'N/A',
            user.first_name || 'N/A',
            user.language || 'Not set',
            user.phone_number || 'N/A',
            user.is_subscribed ? 'Yes' : 'No',
            user.notifications_enabled ? 'Yes' : 'No',
            user.notifications_count || 0,
            formatDate(user.registration_date),
            formatDate(user.last_activity),
            user.onboarding_completed ? 'Yes' : 'No',
            user.onboarding_step || 'N/A'
        ]);

        // –°–æ–∑–¥–∞–µ–º CSV –∫–æ–Ω—Ç–µ–Ω—Ç
        const csvContent = [
            headers.join(','),
            ...rows.map(row => row.map(cell => {
                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –∫–∞–≤—ã—á–∫–∏
                const cellStr = String(cell);
                if (cellStr.includes(',') || cellStr.includes('"') || cellStr.includes('\n')) {
                    return `"${cellStr.replace(/"/g, '""')}"`;
                }
                return cellStr;
            }).join(','))
        ].join('\n');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        const filename = `users_export_${Date.now()}.csv`;
        const filepath = path.join(TEMP_DIR, filename);

        fs.writeFileSync(filepath, '\ufeff' + csvContent, 'utf8'); // BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel

        console.log(`‚úÖ CSV file created: ${filename}`);
        console.log(`   Total users: ${users.length}`);

        return {
            success: true,
            filepath,
            filename,
            count: users.length
        };

    } catch (error) {
        console.error('‚ùå Error creating CSV file:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ usernames
 */
export async function exportUsernames() {
    console.log('üë§ Starting usernames export...');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await database.getAllUsers();

        if (!users || users.length === 0) {
            throw new Error('No users found');
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º usernames
        const usernames = users
            .filter(user => user.username) // –¢–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ–≥–æ –µ—Å—Ç—å username
            .map(user => `@${user.username}`)
            .sort(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        const content = usernames.join('\n');

        const filename = `usernames_${Date.now()}.txt`;
        const filepath = path.join(TEMP_DIR, filename);

        fs.writeFileSync(filepath, content, 'utf8');

        console.log(`‚úÖ Usernames file created: ${filename}`);
        console.log(`   Total usernames: ${usernames.length}`);
        console.log(`   Total users: ${users.length}`);

        return {
            success: true,
            filepath,
            filename,
            count: usernames.length,
            total: users.length
        };

    } catch (error) {
        console.error('‚ùå Error creating usernames file:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ User IDs
 */
export async function exportUserIds() {
    console.log('üÜî Starting user IDs export...');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await database.getAllUsers();

        if (!users || users.length === 0) {
            throw new Error('No users found');
        }

        // –°–æ–±–∏—Ä–∞–µ–º user IDs
        const userIds = users
            .map(user => user.user_id)
            .sort((a, b) => a - b); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        const content = userIds.join('\n');

        const filename = `user_ids_${Date.now()}.txt`;
        const filepath = path.join(TEMP_DIR, filename);

        fs.writeFileSync(filepath, content, 'utf8');

        console.log(`‚úÖ User IDs file created: ${filename}`);
        console.log(`   Total user IDs: ${userIds.length}`);

        return {
            success: true,
            filepath,
            filename,
            count: userIds.length
        };

    } catch (error) {
        console.error('‚ùå Error creating user IDs file:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export function cleanupFile(filepath) {
    try {
        if (fs.existsSync(filepath)) {
            fs.unlinkSync(filepath);
            console.log(`üóëÔ∏è Cleaned up: ${path.basename(filepath)}`);
        }
    } catch (error) {
        console.error('‚ùå Error cleaning up file:', error);
    }
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
 */
export function cleanupOldFiles() {
    try {
        const files = fs.readdirSync(TEMP_DIR);
        const now = Date.now();
        const oneHour = 60 * 60 * 1000;

        files.forEach(file => {
            const filepath = path.join(TEMP_DIR, file);
            const stats = fs.statSync(filepath);
            const age = now - stats.mtimeMs;

            if (age > oneHour) {
                fs.unlinkSync(filepath);
                console.log(`üóëÔ∏è Cleaned up old file: ${file}`);
            }
        });
    } catch (error) {
        console.error('‚ùå Error cleaning up old files:', error);
    }
}