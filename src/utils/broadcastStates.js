/**
 * –û–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫
 * –í production —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis
 */

class BroadcastStateManager {
    constructor() {
        this.states = new Map();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
     */
    init(userId, audience) {
        this.states.set(userId, {
            audience,
            text: null,
            media: null,
            mediaType: null,
            buttons: [],
            scheduled: false,
            scheduledTime: null,
            step: 'text' // text, media, buttons, scheduling, awaiting_datetime, preview
        });
        console.log(`üìù Initialized broadcast state for user ${userId}`);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    get(userId) {
        return this.states.get(userId) || null;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    update(userId, updates) {
        const current = this.states.get(userId);
        if (current) {
            this.states.set(userId, { ...current, ...updates });
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    delete(userId) {
        this.states.delete(userId);
        console.log(`üóëÔ∏è Cleared broadcast state for user ${userId}`);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
     */
    isActive(userId) {
        return this.states.has(userId);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
     */
    getStep(userId) {
        const state = this.states.get(userId);
        return state?.step || null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç
     */
    isAwaitingText(userId) {
        const state = this.states.get(userId);
        return state && state.step === 'text' && state.text === null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –º–µ–¥–∏–∞
     */
    isAwaitingMedia(userId) {
        const state = this.states.get(userId);
        return state && state.step === 'media' && state.text !== null && state.media === null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–∂–∏–¥–∞—é—Ç—Å—è –ª–∏ –∫–Ω–æ–ø–∫–∏
     */
    isAwaitingButtons(userId) {
        const state = this.states.get(userId);
        return state && state.step === 'buttons' && state.text !== null && state.buttons.length === 0;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
     */
    isAwaitingDateTime(userId) {
        const state = this.states.get(userId);
        return state && state.step === 'awaiting_datetime';
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
     */
    getStats() {
        return {
            active: this.states.size,
            users: Array.from(this.states.keys())
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const broadcastStates = new BroadcastStateManager();