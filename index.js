import { Telegraf, Markup } from 'telegraf';
import dotenv from 'dotenv';
import './src/config/firebase.js';
import { database } from './src/config/services/database.js';
import { t } from './src/locales/i18n.js';
import {
    getMainKeyboard,
    getLanguageKeyboard
} from './src/utils/keyboards.js';
import { sendWelcomeMessageWithImage } from './src/utils/welcome.js';

// –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
import { registerAdminHandlers } from './src/handlers/admin/index.js';
import { registerStatisticsHandlers } from './src/handlers/admin/statistics.js';
import {
    registerBroadcastHandlers,
    handleBroadcastText,
    handleBroadcastButtons,
    handleDateTimeInput
} from './src/handlers/admin/broadcast.js';
import { registerExportHandlers } from './src/handlers/admin/export.js';
import { registerSettingsHandlers, handleNotificationIntervalInput, handleNotificationIntervalMinutesInput } from './src/handlers/admin/settings.js';
import { registerNotificationHandlers, handleNotificationInput } from './src/handlers/admin/notifications.js';
import {
    shouldRequestPhone,
    requestPhoneNumber,
    handlePhoneContact,
    handlePhoneSkip,
    isAwaitingPhone
} from './src/handlers/phone.js';

// ‚≠ê –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
import { startNotificationScheduler } from './src/services/notifications.js';
import { startBroadcastScheduler } from './src/services/broadcastScheduler.js';
import { broadcastStates } from './src/utils/broadcastStates.js';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// –î–µ–ª–∞–µ–º –±–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
global.bot = bot;

// ========== HELPER FUNCTIONS ==========

async function getUserLanguage(userId) {
    const user = await database.getUser(userId);
    return user?.language || 'en';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º onboarding)
async function sendWelcomeMessage(ctx, language) {
    await database.updateUser(ctx.from.id, {
        onboarding_step: 'completed',
        onboarding_completed: true
    });

    await sendWelcomeMessageWithImage(ctx, language);
}

// ========== TELEGRAM BOT ==========

// –ö–æ–º–∞–Ω–¥–∞ /start —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
bot.command('start', async (ctx) => {
    const userId = ctx.from.id;
    const username = ctx.from.username;
    const firstName = ctx.from.first_name;

    console.log(`\nüë§ User ${userId} (@${username}) started the bot`);

    let user = await database.getUser(userId);

    if (!user) {
        console.log(`üÜï Creating new user ${userId}...`);
        await database.createUser(userId, {
            username,
            first_name: firstName,
        });

        const languageKeyboard = getLanguageKeyboard();
        await ctx.reply(
            t('welcome.choose_language', 'en'),
            languageKeyboard
        );
    } else {
        const lang = user.language || 'en';

        if (!user.language) {
            const languageKeyboard = getLanguageKeyboard();
            await ctx.reply(
                t('welcome.choose_language', 'en'),
                languageKeyboard
            );
        } else {
            await sendWelcomeMessageWithImage(ctx, lang);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
bot.action(/language_(de|en)/, async (ctx) => {
    const userId = ctx.from.id;
    const language = ctx.match[1];

    console.log(`üåç User ${userId} selected language: ${language}`);

    await database.updateUser(userId, {
        language,
        onboarding_step: 'language_selected'
    });

    await ctx.answerCbQuery();
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    try {
        await ctx.deleteMessage();
    } catch (error) {
        console.log('Could not delete message (might be too old)');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRequired = await shouldRequestPhone();

    if (phoneRequired) {
        console.log(`üì± Phone request is enabled, showing phone keyboard`);
        await requestPhoneNumber(ctx, language);
    } else {
        console.log(`‚≠êÔ∏è Phone request is disabled, showing welcome message`);
        await sendWelcomeMessage(ctx, language);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /language - —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞
bot.command('language', async (ctx) => {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    const languageKeyboard = getLanguageKeyboard();
    await ctx.reply(
        t('welcome.choose_language', lang),
        languageKeyboard
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async (ctx) => {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.reply(t('commands.help_text', lang));
});

// –ö–æ–º–∞–Ω–¥–∞ /unsubscribe - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.command('unsubscribe', async (ctx) => {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    const keyboard = Markup.inlineKeyboard([
        [
            Markup.button.callback(t('commands.button_yes', lang), 'unsubscribe_yes'),
            Markup.button.callback(t('commands.button_no', lang), 'unsubscribe_no')
        ]
    ]);

    await ctx.reply(t('commands.unsubscribe_confirm', lang), keyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø–∏—Å–∫–∏
bot.action('unsubscribe_yes', async (ctx) => {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await database.updateUser(userId, { notifications_enabled: false });

    await ctx.answerCbQuery();
    await ctx.editMessageText(t('commands.unsubscribe_success', lang));
});

bot.action('unsubscribe_no', async (ctx) => {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();
    await ctx.editMessageText(t('commands.unsubscribe_cancelled', lang));
});

// ========== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ê–î–ú–ò–ù-–û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ==========
registerAdminHandlers(bot);
registerStatisticsHandlers(bot);
registerBroadcastHandlers(bot);
registerNotificationHandlers(bot);
registerExportHandlers(bot);
registerSettingsHandlers(bot);

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ù–¢–ê–ö–¢–û–í –ò –¢–ï–ö–°–¢–ê ==========

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
bot.on('contact', async (ctx) => {
    await handlePhoneContact(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);
    const text = ctx.message.text;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const isAdmin = await database.isAdmin(userId);

    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (isAdmin) {
        const user = await database.getUser(userId);
        if (user?.awaiting_input === 'notification_interval') {
            await handleNotificationIntervalInput(ctx, text);
            return;
        }
        
        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
        if (user?.awaiting_input === 'notification_interval_minutes') {
            await handleNotificationIntervalMinutesInput(ctx, text);
            return;
        }
        
        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (user?.awaiting_input?.startsWith('notification_')) {
            await handleNotificationInput(ctx, text);
            return;
        }
    }

    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if (isAdmin && broadcastStates.isActive(userId)) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
        if (text === '/cancel') {
            await handleBroadcastText(ctx);
            return;
        }

        // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        if (broadcastStates.isAwaitingText(userId)) {
            await handleBroadcastText(ctx);
            return;
        }

        // –ï—Å–ª–∏ –æ–∂–∏–¥–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ (—Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç "|")
        if (broadcastStates.isAwaitingButtons(userId)) {
            await handleBroadcastButtons(ctx);
            return;
        }

        // ‚≠ê –î–û–ë–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è
        if (broadcastStates.isAwaitingDateTime(userId)) {
            await handleDateTimeInput(ctx);
            return;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –±–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const awaitingPhone = await isAwaitingPhone(userId);

    if (awaitingPhone) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        const skipped = await handlePhoneSkip(ctx);
        if (skipped) {
            return;
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await database.updateUser(userId, {});

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ (—ç—Ö–æ-—Ñ—É–Ω–∫—Ü–∏—è)
    await sendWelcomeMessageWithImage(ctx, lang);
});

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==========
bot.catch((err, ctx) => {
    console.error('‚ùå Bot error:', err);
    const userId = ctx.from?.id;

    if (userId) {
        getUserLanguage(userId).then(lang => {
            ctx.reply(t('errors.general', lang)).catch(console.error);
        });
    }
});

// ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
console.log('ü§ñ Starting Telegram bot...');

bot.launch({
    dropPendingUpdates: true
});

// –ñ–¥—ë–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
setTimeout(() => {
    if (bot.botInfo) {
        console.log('‚úÖ Bot started successfully!');
        console.log('üîó Bot username: @' + bot.botInfo.username);
        console.log('\nüìä Admin Panel: /admin');
        console.log('üåç Change Language: /language');
        console.log('‚ùì Help: /help');
        console.log('üì± Phone Request: configurable in /admin');

        console.log('\nüîß Starting notification scheduler...');
        startNotificationScheduler(bot);

        console.log('üìÖ Starting broadcast scheduler...');
        startBroadcastScheduler(bot);
    } else {
        console.log('‚ö†Ô∏è Bot not ready yet, retrying...');
        setTimeout(() => {
            console.log('‚úÖ Bot started successfully!');
            console.log('üîó Bot username: @' + bot.botInfo.username);
            startNotificationScheduler(bot);
            startBroadcastScheduler(bot);
        }, 2000);
    }
}, 2000);

bot.command('enablenotifications', async (ctx) => {
    const userId = ctx.from.id;
    await database.updateUser(userId, { notifications_enabled: true });
    await ctx.reply('‚úÖ Notifications enabled for testing!');
});

// Graceful shutdown
process.once('SIGINT', () => {
    console.log('\n‚ö†Ô∏è SIGINT received, stopping bot...');
    bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
    console.log('\n‚ö†Ô∏è SIGTERM received, stopping bot...');
    bot.stop('SIGTERM');
});