import { Telegraf } from 'telegraf';
import dotenv from 'dotenv';
import './src/config/firebase.js';
import { database } from './src/config/services/database.js';
import { t } from './src/locales/i18n.js';
import {
    getMainKeyboard,
    getLanguageKeyboard
} from './src/utils/keyboards.js';

// –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
import { registerAdminHandlers } from './src/handlers/admin/index.js';
import { registerStatisticsHandlers } from './src/handlers/admin/statistics.js';
import { registerBroadcastHandlers } from './src/handlers/admin/broadcast.js';
import { registerExportHandlers } from './src/handlers/admin/export.js';
import { registerSettingsHandlers } from './src/handlers/admin/settings.js';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// ========== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FIREBASE ==========
(async () => {
    console.log('\nüî• Testing Firebase connection...');
    const testResult = await database.testConnection();
    if (testResult) {
        console.log('‚úÖ Firebase is ready to use!\n');
    } else {
        console.log('‚ùå Firebase connection failed. Check your credentials.\n');
        process.exit(1);
    }
})();

// ========== HELPER FUNCTIONS ==========

async function getUserLanguage(userId) {
    const user = await database.getUser(userId);
    return user?.language || 'en';
}

// ========== TELEGRAM BOT ==========

// –ö–æ–º–∞–Ω–¥–∞ /start —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
bot.command('start', async (ctx) => {
    const userId = ctx.from.id;
    const username = ctx.from.username;
    const firstName = ctx.from.first_name;

    console.log(`\nüë§ User ${userId} (@${username}) started the bot`);

    let user = await database.getUser(userId);

    if (!user) {
        console.log(`üìù Creating new user ${userId}...`);
        await database.createUser(userId, {
            username,
            first_name: firstName,
        });

        const languageKeyboard = getLanguageKeyboard();
        await ctx.reply(
            t('welcome.choose_language', 'en'),
            languageKeyboard
        );
    } else {
        const lang = user.language || 'en';

        if (!user.language) {
            const languageKeyboard = getLanguageKeyboard();
            await ctx.reply(
                t('welcome.choose_language', 'en'),
                languageKeyboard
            );
        } else {
            await ctx.reply(
                t('main.welcome_text', lang),
                getMainKeyboard(lang)
            );
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
bot.action(/language_(de|en)/, async (ctx) => {
    const userId = ctx.from.id;
    const language = ctx.match[1];

    console.log(`üåê User ${userId} selected language: ${language}`);

    await database.updateUser(userId, {
        language,
        onboarding_step: 'channel_subscription'
    });

    await ctx.answerCbQuery();
    await ctx.editMessageText(t('welcome.language_selected', language));

    // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    setTimeout(async () => {
        await ctx.reply(
            t('main.welcome_text', language),
            getMainKeyboard(language)
        );
    }, 1000);
});

// –ö–æ–º–∞–Ω–¥–∞ /language - —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞
bot.command('language', async (ctx) => {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    const languageKeyboard = getLanguageKeyboard();
    await ctx.reply(
        t('welcome.choose_language', lang),
        languageKeyboard
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async (ctx) => {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.reply(t('commands.help_text', lang));
});

// –ö–æ–º–∞–Ω–¥–∞ /unsubscribe - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.command('unsubscribe', async (ctx) => {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    const keyboard = Markup.inlineKeyboard([
        [
            Markup.button.callback(t('commands.button_yes', lang), 'unsubscribe_yes'),
            Markup.button.callback(t('commands.button_no', lang), 'unsubscribe_no')
        ]
    ]);

    await ctx.reply(t('commands.unsubscribe_confirm', lang), keyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø–∏—Å–∫–∏
bot.action('unsubscribe_yes', async (ctx) => {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await database.updateUser(userId, { notifications_enabled: false });

    await ctx.answerCbQuery();
    await ctx.editMessageText(t('commands.unsubscribe_success', lang));
});

bot.action('unsubscribe_no', async (ctx) => {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    await ctx.answerCbQuery();
    await ctx.editMessageText(t('commands.unsubscribe_cancelled', lang));
});

// ========== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ê–î–ú–ò–ù-–û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ==========
registerAdminHandlers(bot);
registerStatisticsHandlers(bot);
registerBroadcastHandlers(bot);
registerExportHandlers(bot);
registerSettingsHandlers(bot);

// ========== –≠–•–û-–§–£–ù–ö–¶–ò–Ø ==========
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const lang = await getUserLanguage(userId);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await database.updateUser(userId, {});

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await ctx.reply(
        t('main.welcome_text', lang),
        getMainKeyboard(lang)
    );
});

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==========
bot.catch((err, ctx) => {
    console.error('‚ùå Bot error:', err);
    const userId = ctx.from?.id;

    if (userId) {
        getUserLanguage(userId).then(lang => {
            ctx.reply(t('errors.general', lang)).catch(console.error);
        });
    }
});

// ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
console.log('ü§ñ Starting Telegram bot...');

bot.launch({
    dropPendingUpdates: true
}).then(() => {
    console.log('‚úÖ Bot started successfully!');
    console.log('üîó Bot username: @' + bot.botInfo.username);
    console.log('\nüìä Admin Panel: /admin');
    console.log('üåê Change Language: /language');
    console.log('‚ùì Help: /help');
});

// Graceful shutdown
process.once('SIGINT', () => {
    console.log('\n‚ö†Ô∏è SIGINT received, stopping bot...');
    bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
    console.log('\n‚ö†Ô∏è SIGTERM received, stopping bot...');
    bot.stop('SIGTERM');
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
// –í–ê–ñ–ù–û: –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É!
bot.command('makeadmin', async (ctx) => {
    const userId = ctx.from.id;
    const username = ctx.from.username;

    console.log(`\nüîê Make admin request:`);
    console.log(`   User ID: ${userId}`);
    console.log(`   Username: @${username}`);

    // –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å ID —Ç–æ–≥–æ, –∫—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º –∞–¥–º–∏–Ω–æ–º
    const ALLOWED_INIT_IDS = [5230934145, 1099861998];

    if (!ALLOWED_INIT_IDS.includes(userId)) {
        console.log(`   ‚ùå User ${userId} is not in allowed list`);
        await ctx.reply('‚ùå Access denied. This command is restricted.');
        return;
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        let settings = await database.getBotSettings();

        if (!settings) {
            console.log('   Creating default settings...');
            await database.createDefaultSettings();
            settings = await database.getBotSettings();
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω—ã
        const currentAdmins = settings.admin_ids || [];

        if (currentAdmins.includes(userId)) {
            await ctx.reply('‚úÖ You are already an admin!');
            console.log(`   ‚ÑπÔ∏è  User ${userId} is already admin`);
            return;
        }

        currentAdmins.push(userId);

        await database.updateSettings({
            admin_ids: currentAdmins
        });

        await ctx.reply(
            '‚úÖ Admin access granted!\n\n' +
            'You can now use /admin command.\n\n' +
            '‚ö†Ô∏è For security, consider removing /makeadmin command from the code.'
        );

        console.log(`   ‚úÖ User ${userId} (@${username}) added as admin`);
        console.log(`   Current admins: ${currentAdmins.join(', ')}`);

    } catch (error) {
        console.error('   ‚ùå Error adding admin:', error);
        await ctx.reply('‚ùå Error occurred. Check the logs.');
    }
});